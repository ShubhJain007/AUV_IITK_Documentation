{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AUV IITK Overall Documentation Team AUV IITK ( Autonomous Underwater vehicle, Indian Institute of Technology, Kanpur), from IIT Kanpur, India, is an undergraduate student led team that builds Autonomous Underwater Vehicles (AUVs) to perform at various international competitions and perform cutting edge Research . Since our beginning in 2014, the Team has expanded quite a lot with more than 30 active members and an active alumni network. We have come a far away in technological advancement since our beginning. We love to share our idea and develop great collaboration with people around the world \ud83d\ude0a. We also love to recieve new ideas, suggestions and guidance from different teams around the globe \ud83d\ude04. The code is open source, and available on Github. This documentation is organized into a couple section: User Documentation Software Documentation Electrical Documentation Mechanical Documentation Proof of Concept About AUV_IITK User Documentation Getting Started Installation Developers Guide Software Documentation Overview DVL IMU Vision Electrical Documentation Overview Hydrophones DVL Mechanical Documentation Overview About AUV IITK. The Project Open Source Philosophy Sponsors of AUV IITK","title":"Home"},{"location":"#welcome-to-auv-iitk-overall-documentation","text":"Team AUV IITK ( Autonomous Underwater vehicle, Indian Institute of Technology, Kanpur), from IIT Kanpur, India, is an undergraduate student led team that builds Autonomous Underwater Vehicles (AUVs) to perform at various international competitions and perform cutting edge Research . Since our beginning in 2014, the Team has expanded quite a lot with more than 30 active members and an active alumni network. We have come a far away in technological advancement since our beginning. We love to share our idea and develop great collaboration with people around the world \ud83d\ude0a. We also love to recieve new ideas, suggestions and guidance from different teams around the globe \ud83d\ude04. The code is open source, and available on Github. This documentation is organized into a couple section: User Documentation Software Documentation Electrical Documentation Mechanical Documentation Proof of Concept About AUV_IITK","title":" Welcome to AUV IITK Overall Documentation"},{"location":"#user-documentation","text":"Getting Started Installation Developers Guide","title":"User Documentation "},{"location":"#software-documentation","text":"Overview DVL IMU Vision","title":"Software Documentation "},{"location":"#electrical-documentation","text":"Overview Hydrophones DVL","title":"Electrical Documentation "},{"location":"#mechanical-documentation","text":"Overview","title":"Mechanical Documentation "},{"location":"#about-auv-iitk","text":"The Project Open Source Philosophy Sponsors of AUV IITK","title":"About AUV IITK. "},{"location":"POC/2018_2019/","text":"2018-2019 Docker Project Needs This project was made to replace the Ubuntu 18.04 partition witch a Docker image. The main goal of the project was to eliminate dependencies with the operating system to allow developpers to choose the operating system of their choice. Project Deadlock The main problems encountered were the implementation of the graphical interface in the docker and the installation of the DALSA drivers. Regarding the implementation of the graphical interface, the software team found as a solution to replace the telemetry programmed with RQT by a server that would send data to a web browser. for the drivers installation, no solutions were found. This project was abandonned since the team effort was not worth the outcome. This project archive can be found on github","title":"2018-2019"},{"location":"POC/2018_2019/#2018-2019","text":"","title":"2018-2019"},{"location":"POC/2018_2019/#docker-project","text":"","title":"Docker Project"},{"location":"POC/2018_2019/#needs","text":"This project was made to replace the Ubuntu 18.04 partition witch a Docker image. The main goal of the project was to eliminate dependencies with the operating system to allow developpers to choose the operating system of their choice.","title":"Needs"},{"location":"POC/2018_2019/#project-deadlock","text":"The main problems encountered were the implementation of the graphical interface in the docker and the installation of the DALSA drivers. Regarding the implementation of the graphical interface, the software team found as a solution to replace the telemetry programmed with RQT by a server that would send data to a web browser. for the drivers installation, no solutions were found. This project was abandonned since the team effort was not worth the outcome. This project archive can be found on github","title":"Project Deadlock"},{"location":"about/open_source/","text":"","title":"Open Source Philosophy"},{"location":"about/project/","text":"","title":"The Project"},{"location":"about/sponsors/","text":"","title":"Sponsors of AUV IITK."},{"location":"electrical/dvl/","text":"Doppler Velocity Logger Acoustic Doppler current profiler The DVL is a device that measure the speed of water. It is largely used in underwater navigation. In the case of our AUV, the DVL is a device with a half-sphere-shaped placed at the bottom of the frame. The DVL is using the Doppler effect in order to calculate the speed of the water around itself. From Wikipedia: \u201cThe Doppler effect (or Doppler shift) is the change in frequency of a wave (or other periodic event) for an observer moving relative to its source. It is named after the Austrian physicist Christian Doppler, who proposed it in 1842 in Prague.\u201d The DVL sends an accoustic wave at a specific frequency. This wave is going to be reflected by the bodies that it will meet. In our case, this is generally a wall or the floor of the pool. The DVL will then receive the reflected wave and it will be able to observe a delta between the sent wave and the received one. From this observation, we can have sort out the following statements: If F_r < f_o, the submarine is moving away from the body that reflected the wave. If F_r > F_o, the submarine is moving toward the body that reflected the wave.","title":"DVL"},{"location":"electrical/dvl/#doppler-velocity-logger","text":"Acoustic Doppler current profiler The DVL is a device that measure the speed of water. It is largely used in underwater navigation. In the case of our AUV, the DVL is a device with a half-sphere-shaped placed at the bottom of the frame. The DVL is using the Doppler effect in order to calculate the speed of the water around itself. From Wikipedia: \u201cThe Doppler effect (or Doppler shift) is the change in frequency of a wave (or other periodic event) for an observer moving relative to its source. It is named after the Austrian physicist Christian Doppler, who proposed it in 1842 in Prague.\u201d The DVL sends an accoustic wave at a specific frequency. This wave is going to be reflected by the bodies that it will meet. In our case, this is generally a wall or the floor of the pool. The DVL will then receive the reflected wave and it will be able to observe a delta between the sent wave and the received one. From this observation, we can have sort out the following statements: If F_r < f_o, the submarine is moving away from the body that reflected the wave. If F_r > F_o, the submarine is moving toward the body that reflected the wave.","title":" Doppler Velocity Logger"},{"location":"electrical/hydrophones/","text":"Hydrophones We are using Aquarin AS-1 hydrophones in our AUV. Currently we are still in the development phase for the same. We plan to use them with our CDAQ 9223 along with some pre-amplifiers. We will be using labView software for the signal processing. As soon as we get up things running they will be updated here.","title":"Hydrophones"},{"location":"electrical/hydrophones/#hydrophones","text":"We are using Aquarin AS-1 hydrophones in our AUV. Currently we are still in the development phase for the same. We plan to use them with our CDAQ 9223 along with some pre-amplifiers. We will be using labView software for the signal processing. As soon as we get up things running they will be updated here.","title":" Hydrophones"},{"location":"electrical/overview/","text":"","title":"Overview"},{"location":"mechanical/overview/","text":"","title":"Overview"},{"location":"server/getting_started/","text":"Getting started","title":"<a name=\"title\"></a> Getting started"},{"location":"server/getting_started/#getting-started","text":"","title":" Getting started"},{"location":"server/installation/","text":"Installation This document provides all the installation steps to setup a Google cloud compute instance to train our object detection deep learning models. Please make sure you first have been granted access to our Google compute instances and Google cloud storage. You can ask either Marc-Antoine or Martin to grants you those rights. Google cloud instance setup Google cloud storage setup","title":"<a name=\"title\"></a> Installation"},{"location":"server/installation/#installation","text":"This document provides all the installation steps to setup a Google cloud compute instance to train our object detection deep learning models. Please make sure you first have been granted access to our Google compute instances and Google cloud storage. You can ask either Marc-Antoine or Martin to grants you those rights.","title":" Installation"},{"location":"server/installation/#google-cloud-instance-setup","text":"","title":" Google cloud instance setup"},{"location":"server/installation/#google-cloud-storage-setup","text":"","title":" Google cloud storage setup"},{"location":"server/orchestration/","text":"Orchestration","title":"<a name=\"title\"></a> Orchestration"},{"location":"server/orchestration/#orchestration","text":"","title":" Orchestration"},{"location":"software/dvl/","text":"Package: waterlinked_dvl Global Architecture Configurations Topics ROS /$AUV_name$/dvl_twists We use Waterlinked A50 DVL in our AUVs. And it\u2019s documentation and usage instructions can be found on the official website given above. Usage instructions Build : Build the ros package in the same catkin workspace as the AUV. Redirect : Redirect the topic of waterlinked_dvl packager subscriber_gui to /$AUV_name$/dvl_twists for the software to access it. Set-Up : NOTE - provide DVL enough power otherwise it wont\u2019t work and connect. Connect the ethernet cable to the NUC\u2019s ethernet port. IP_Configure : Configure the ip address of your connection as 192.168.194.90 on same subnet as DVl ,i.e, 192.168.194.95 and then can be run via intrustions in the dvl-a50 ros package. To configure the ip for DVL use the command sudo ip addr add 192.168.194.90/24 dev eth1 dont configure from network settings. And dont forget to run roscore service before running publisher.py. Check : The DVL web gui will start by clicking the gui link from waterlinked website if everything is connected successfully. Troubleshoot DVL powers on but doesn\u2019t get connected : Check the power supply rating. We faced the same problem ,the issue was supply rating.\u201d DVL Ros package getting disconnected with DVL after some time : Keep the web GUI open in background always while running the ros package it resolves this issue.","title":"DVL"},{"location":"software/dvl/#package-waterlinked_dvl","text":"","title":"Package: waterlinked_dvl"},{"location":"software/dvl/#global-architecture","text":"","title":"Global Architecture"},{"location":"software/dvl/#configurations","text":"","title":"Configurations"},{"location":"software/dvl/#topics-ros","text":"","title":"Topics ROS"},{"location":"software/dvl/#auv_namedvl_twists","text":"We use Waterlinked A50 DVL in our AUVs. And it\u2019s documentation and usage instructions can be found on the official website given above.","title":"/$AUV_name$/dvl_twists"},{"location":"software/dvl/#usage-instructions","text":"Build : Build the ros package in the same catkin workspace as the AUV. Redirect : Redirect the topic of waterlinked_dvl packager subscriber_gui to /$AUV_name$/dvl_twists for the software to access it. Set-Up : NOTE - provide DVL enough power otherwise it wont\u2019t work and connect. Connect the ethernet cable to the NUC\u2019s ethernet port. IP_Configure : Configure the ip address of your connection as 192.168.194.90 on same subnet as DVl ,i.e, 192.168.194.95 and then can be run via intrustions in the dvl-a50 ros package. To configure the ip for DVL use the command sudo ip addr add 192.168.194.90/24 dev eth1 dont configure from network settings. And dont forget to run roscore service before running publisher.py. Check : The DVL web gui will start by clicking the gui link from waterlinked website if everything is connected successfully.","title":"Usage instructions"},{"location":"software/dvl/#troubleshoot","text":"DVL powers on but doesn\u2019t get connected : Check the power supply rating. We faced the same problem ,the issue was supply rating.\u201d DVL Ros package getting disconnected with DVL after some time : Keep the web GUI open in background always while running the ros package it resolves this issue.","title":"Troubleshoot"},{"location":"software/imu/","text":"Package: Xsens_driver Global Architecture Configurations Topics ROS /$AUV_name$/imu We use Xsens Mti 300 in our AUVs. And it\u2019s documentation and usage instructions can be found on the official website given above. Usage instructions Build : Build the ros package in the same catkin workspace as the AUV keep the package inside the hardware_layer. Redirect : Redirect the topic of packager publisher to /$AUV_name$/imu for the software to access it. Set-Up : NOTE - Change the IMU reset config in the code to prevent continuous heading reset of the IMU. Install Mti software manager in a windows/linux machine and there you can config the device . Disable the magnetometer otherwise it will always take true North as reference position Launch : Launch the given launch file. Check : The data will start logging on the terminal. Services /nav/imu_quat - to reset the heading of the imu on will. Troubleshoot Proper Mti device not found : Check the port name+no. Check the physical USB connection.","title":"IMU"},{"location":"software/imu/#package-xsens_driver","text":"","title":"Package: Xsens_driver"},{"location":"software/imu/#global-architecture","text":"","title":"Global Architecture"},{"location":"software/imu/#configurations","text":"","title":"Configurations"},{"location":"software/imu/#topics-ros","text":"","title":"Topics ROS"},{"location":"software/imu/#auv_nameimu","text":"We use Xsens Mti 300 in our AUVs. And it\u2019s documentation and usage instructions can be found on the official website given above.","title":"/$AUV_name$/imu"},{"location":"software/imu/#usage-instructions","text":"Build : Build the ros package in the same catkin workspace as the AUV keep the package inside the hardware_layer. Redirect : Redirect the topic of packager publisher to /$AUV_name$/imu for the software to access it. Set-Up : NOTE - Change the IMU reset config in the code to prevent continuous heading reset of the IMU. Install Mti software manager in a windows/linux machine and there you can config the device . Disable the magnetometer otherwise it will always take true North as reference position Launch : Launch the given launch file. Check : The data will start logging on the terminal.","title":"Usage instructions"},{"location":"software/imu/#services","text":"/nav/imu_quat - to reset the heading of the imu on will.","title":"Services"},{"location":"software/imu/#troubleshoot","text":"Proper Mti device not found : Check the port name+no. Check the physical USB connection.","title":"Troubleshoot"},{"location":"software/interface_RS485/","text":"Interface RS485 overview interface RS485 bridge the software and the RS485 protocol. algorithm RS485 use 4 different threads and two thread-safe queue (writerQueue and parseQueue). the first thread, the main thread, stay in the ros spin and receive the data from ros. the second thread, the reader thread, read on the serial file and push the data on the parseQueue. the third thread, the parser thread, take the byte in the parseQueue and parse them into a ros message. the fourth thread, the writer thread, take the message in the writerQueue, parse it and send the byte in the serial file. Ros message SendRS485Msg # SLAVE ID uint8 SLAVE_powersupply0 = 49 uint8 SLAVE_powersupply1 = 50 uint8 SLAVE_powersupply2 = 51 uint8 SLAVE_powersupply3 = 52 uint8 SLAVE_killMission = 32 uint8 SLAVE_ISI_PWM = 16 uint8 SLAVE_ISI_1 = 17 uint8 SLAVE_ISI_2 = 18 uint8 SLAVE_ISI_3 = 19 uint8 SLAVE_ISI_4 = 20 uint8 SLAVE_ISI_5 = 21 uint8 SLAVE_ISI_6 = 22 uint8 SLAVE_ISI_7 = 23 uint8 SLAVE_ISI_8 = 24 uint8 SLAVE_IO_CTR = 64 #CMD # les define de la kill mission switch uint8 CMD_MISSION =0 uint8 CMD_KILL =1 # les define du powersupply uint8 CMD_PS_V16_1 =0 uint8 CMD_PS_V16_2 =1 uint8 CMD_PS_V12 =2 uint8 CMD_PS_C16_1 =3 uint8 CMD_PS_C16_2 =4 uint8 CMD_PS_C12 =5 uint8 CMD_PS_temperature =6 uint8 CMD_PS_VBatt =7 #define de ISI uint8 CMD_ISI_power = 0 uint8 CMD_PS_ACT_12V = 16 uint8 CMD_PS_ACT_16V_1 = 17 uint8 CMD_PS_ACT_16V_2 = 18 uint8 CMD_PS_CHECK_12V = 19 uint8 CMD_PS_CHECK_16V_1 = 20 uint8 CMD_PS_CHECK_16V_2 = 21 uint8 CMD_POWERSUPPLY_action1 = 2 # define IO CONTROL uint8 CMD_IO_TEMP = 0 uint8 CMD_IO_DROPPER_PORT = 1 uint8 CMD_IO_DROPPER_STARBOARD = 2 uint8 CMD_IO_TORPEDO_PORT = 3 uint8 CMD_IO_TORPEDO_STARBOARD = 4 uint8 CMD_IO_LEAK_SENSOR_FRONT = 17 uint8 CMD_IO_LEAK_SENSOR_RIGHT = 18 uint8 CMD_IO_LEAK_SENSOR_BACK = 19 uint8 CMD_IO_LEAK_SENSOR_LEFT = 20 uint8 DATA_IO_DROPPER_RESET = 0 uint8 DATA_IO_DROPPER_LAUNCH = 1 uint8 DATA_IO_TORPEDO_RESET = 0 uint8 DATA_IO_TORPEDO_ARMED = 1 uint8 DATA_IO_TORPEDO_LAUNCH = 1 # SERVICE DEFINITION uint8 slave uint8 cmd uint8[] data RS485 structure the cmd and the slave value can be found in the ros message definition. useful documentation serial programming in posix","title":"Interface RS485"},{"location":"software/interface_RS485/#interface-rs485","text":"","title":"Interface RS485"},{"location":"software/interface_RS485/#overview","text":"interface RS485 bridge the software and the RS485 protocol.","title":"overview"},{"location":"software/interface_RS485/#algorithm","text":"RS485 use 4 different threads and two thread-safe queue (writerQueue and parseQueue). the first thread, the main thread, stay in the ros spin and receive the data from ros. the second thread, the reader thread, read on the serial file and push the data on the parseQueue. the third thread, the parser thread, take the byte in the parseQueue and parse them into a ros message. the fourth thread, the writer thread, take the message in the writerQueue, parse it and send the byte in the serial file.","title":"algorithm"},{"location":"software/interface_RS485/#ros-message","text":"","title":"Ros message"},{"location":"software/interface_RS485/#sendrs485msg","text":"# SLAVE ID uint8 SLAVE_powersupply0 = 49 uint8 SLAVE_powersupply1 = 50 uint8 SLAVE_powersupply2 = 51 uint8 SLAVE_powersupply3 = 52 uint8 SLAVE_killMission = 32 uint8 SLAVE_ISI_PWM = 16 uint8 SLAVE_ISI_1 = 17 uint8 SLAVE_ISI_2 = 18 uint8 SLAVE_ISI_3 = 19 uint8 SLAVE_ISI_4 = 20 uint8 SLAVE_ISI_5 = 21 uint8 SLAVE_ISI_6 = 22 uint8 SLAVE_ISI_7 = 23 uint8 SLAVE_ISI_8 = 24 uint8 SLAVE_IO_CTR = 64 #CMD # les define de la kill mission switch uint8 CMD_MISSION =0 uint8 CMD_KILL =1 # les define du powersupply uint8 CMD_PS_V16_1 =0 uint8 CMD_PS_V16_2 =1 uint8 CMD_PS_V12 =2 uint8 CMD_PS_C16_1 =3 uint8 CMD_PS_C16_2 =4 uint8 CMD_PS_C12 =5 uint8 CMD_PS_temperature =6 uint8 CMD_PS_VBatt =7 #define de ISI uint8 CMD_ISI_power = 0 uint8 CMD_PS_ACT_12V = 16 uint8 CMD_PS_ACT_16V_1 = 17 uint8 CMD_PS_ACT_16V_2 = 18 uint8 CMD_PS_CHECK_12V = 19 uint8 CMD_PS_CHECK_16V_1 = 20 uint8 CMD_PS_CHECK_16V_2 = 21 uint8 CMD_POWERSUPPLY_action1 = 2 # define IO CONTROL uint8 CMD_IO_TEMP = 0 uint8 CMD_IO_DROPPER_PORT = 1 uint8 CMD_IO_DROPPER_STARBOARD = 2 uint8 CMD_IO_TORPEDO_PORT = 3 uint8 CMD_IO_TORPEDO_STARBOARD = 4 uint8 CMD_IO_LEAK_SENSOR_FRONT = 17 uint8 CMD_IO_LEAK_SENSOR_RIGHT = 18 uint8 CMD_IO_LEAK_SENSOR_BACK = 19 uint8 CMD_IO_LEAK_SENSOR_LEFT = 20 uint8 DATA_IO_DROPPER_RESET = 0 uint8 DATA_IO_DROPPER_LAUNCH = 1 uint8 DATA_IO_TORPEDO_RESET = 0 uint8 DATA_IO_TORPEDO_ARMED = 1 uint8 DATA_IO_TORPEDO_LAUNCH = 1 # SERVICE DEFINITION uint8 slave uint8 cmd uint8[] data","title":"SendRS485Msg"},{"location":"software/interface_RS485/#rs485-structure","text":"the cmd and the slave value can be found in the ros message definition.","title":"RS485 structure"},{"location":"software/interface_RS485/#useful-documentation","text":"serial programming in posix","title":"useful documentation"},{"location":"software/overview/","text":"Software Architecture Overview Since we are still at the beginning of our advancement in software part, we have designed the software of the AUV to follow a modular pattern ,i.e, one layer does not affect the other. This creztes ease of use and a hassle free environment.","title":"Overview"},{"location":"software/overview/#software-architecture-overview","text":"Since we are still at the beginning of our advancement in software part, we have designed the software of the AUV to follow a modular pattern ,i.e, one layer does not affect the other. This creztes ease of use and a hassle free environment.","title":"Software Architecture Overview"},{"location":"software/proc_mapping/","text":"proc_mapping The proc_mapping package is the module that merge objectives (beoys, fens, etc.) obtained from different providers. It treats data and expose the result, so a different node can use them (i.e. mission). Overview ??? Global Architecture ??? ROS Node ??? Librairies The proc_mapping package uses differents librairies: Armadillo (Matrix) MlPack (Algorithms)","title":"proc_mapping"},{"location":"software/proc_mapping/#proc_mapping","text":"The proc_mapping package is the module that merge objectives (beoys, fens, etc.) obtained from different providers. It treats data and expose the result, so a different node can use them (i.e. mission).","title":"proc_mapping"},{"location":"software/proc_mapping/#overview","text":"???","title":"Overview"},{"location":"software/proc_mapping/#global-architecture","text":"???","title":"Global Architecture"},{"location":"software/proc_mapping/#ros-node","text":"???","title":"ROS Node"},{"location":"software/proc_mapping/#librairies","text":"The proc_mapping package uses differents librairies: Armadillo (Matrix) MlPack (Algorithms)","title":"Librairies"},{"location":"software/provider_can/","text":"provider_can The provider_can package is the module that handles communicating with SONIA\u2019s subarine CAN devices. SONIA\u2019s CAN communication standard is explained in another documentation. available devices are: Barometer, Led indicator, Diver interface, Hydrophones, thrusters (8), Power supply, Mission switch, Droppers, Grabber, Torpedo launcher. Overview Usage Example A launch file exists for launching the provider_can package. One you have compiled and sourced the devel/setup.bash file, you can simply execute: roslaunch provider_can provider_can.launch This will start the CAN communication system and open all the published topics. Global Architecture Class Diagrams Configuration file In the /provider_can/config directory, you can find kvaser_conf.yaml file which can be passed as a parameter to the ROS node. This file allows the user to modify some of the configurations of the CAN drivers. The content of the yaml file is shown below. provider_can/driver/baudrate: 125 provider_can/driver/device_id: 1 provider_can/driver/unique_id: 1 provider_can/driver/channel: 0 provider_can/driver/usb_device: \u201cKVaser\u201d baudrate : CAN baudrate values, in kHz. possible values are: 50, 62, 100, 125, 250 and 1000. Actual config is 125. device_id and unique_id : Computer ID. This is the CAN ID that will be used by the provider_can when sending broadcast messages. See Electrical section in the Wiki page for more inforamtions about IDs. channel : KVaser bus channel to use. usb_device : Actually, only one CAN device is possible, which is KVaser. All KVaser devices use the same librairies. ROS Node Subscribed Topics None. provider_can only publish topics. Published Topics For each device initialized, there are 3 topics published: DEVICE_msgs, DEVICE_notices, DEVICE_properties, Where DEVICE is the name of the specific device (example: barometer_msgs) DEVICE_msgs Theses topics will contain all device\u2019s specific informations that are important during subarine\u2019s operation, such as speed for thrusters or pressure for barometer. DEVICE_notices These topics will contain ping responses and faults for each devices. DEVICE_properties These topics will contain devices properties. These properties will be published at provider_can startup for each discovered and known devices. Properties are: uint16 firmware_version : Signature of LPC chip uint32 uc_signature : may be RESET, SLEEP, WAKEUP or ISP uint8 capabilities : any data uint8 device_data : RTR send rate, in ms uint16 poll_rate In Winter 2016 version of provider_can, poll_rate properties means nothing. It is not actually implemented in ELE part. It will be later on. Services provider_can offers 1 service, which is defined in SendCanMessage.srv in sonia_msgs file. The name of the service is send_can_message . The service is common to all devices. You may set thrusters speed, light intensity, diver_interface displayed text, etc. with this same service. See the parameters for more informations. Parameters This part is very important. It explains how to use the main service of the provider_can, which is send_can_message . /provider_can/can/send_can_message ( uint8 device_id , uint8 unique_id , uint8 method_number , float64 parameter_value , string string_param ) : returns uint8 As an example, if we want to send speed 50 to the port thruster, we would send this command in a command prompt: rosservice call /provider_can/send_can_message 2 1 0 50 \"\" param device_id = 2 // DEVICE_ID_actuators (constant defined in SendCanMessage.srv) param unique_id = 1 // UNIQUE_ID_ACT_port_motor (constant defined in SendCanMessage.srv) param method_number = 0 // METHOD_MOTOR_set_speed (constant defined in SendCanMessage.srv) param parameter_value = 50 // speed value param string_param = \u201c\u201d // unused See next sections for more explanations. Param device_id device_id represents the ID number of a specific class of devices, such as actuator or sensors. The IDs are all defined as constants in send_can_message service. Param unique_id : unique_id represents the ID number of a specific device in a device_id class. The IDs are all defined as constants in send_can_message service. Param method_number and parameter_value : method_number is the method you want to call from the specified device. Some methods are common to all devices. parameter_value is the only possible parameter of that method. Note: diver_interface has a string parameter. All methods numbers are defined as contants in the service .srv file. Param string_param This parameter is only used by diver interface. It is the parameter for the methods METHOD_DIVER_set_mission_string and METHOD_DIVER_set_state_string. It changes the strings displayed on the interface. return can_send_message always return 0 or 1, depending if the device specified is present or not on the can bus.","title":"provider_can"},{"location":"software/provider_can/#provider_can","text":"The provider_can package is the module that handles communicating with SONIA\u2019s subarine CAN devices. SONIA\u2019s CAN communication standard is explained in another documentation. available devices are: Barometer, Led indicator, Diver interface, Hydrophones, thrusters (8), Power supply, Mission switch, Droppers, Grabber, Torpedo launcher.","title":"provider_can"},{"location":"software/provider_can/#overview","text":"","title":"Overview"},{"location":"software/provider_can/#usage-example","text":"A launch file exists for launching the provider_can package. One you have compiled and sourced the devel/setup.bash file, you can simply execute: roslaunch provider_can provider_can.launch This will start the CAN communication system and open all the published topics.","title":"Usage Example"},{"location":"software/provider_can/#global-architecture","text":"","title":"Global Architecture"},{"location":"software/provider_can/#class-diagrams","text":"","title":"Class Diagrams"},{"location":"software/provider_can/#configuration-file","text":"In the /provider_can/config directory, you can find kvaser_conf.yaml file which can be passed as a parameter to the ROS node. This file allows the user to modify some of the configurations of the CAN drivers. The content of the yaml file is shown below. provider_can/driver/baudrate: 125 provider_can/driver/device_id: 1 provider_can/driver/unique_id: 1 provider_can/driver/channel: 0 provider_can/driver/usb_device: \u201cKVaser\u201d baudrate : CAN baudrate values, in kHz. possible values are: 50, 62, 100, 125, 250 and 1000. Actual config is 125. device_id and unique_id : Computer ID. This is the CAN ID that will be used by the provider_can when sending broadcast messages. See Electrical section in the Wiki page for more inforamtions about IDs. channel : KVaser bus channel to use. usb_device : Actually, only one CAN device is possible, which is KVaser. All KVaser devices use the same librairies.","title":"Configuration file"},{"location":"software/provider_can/#ros-node","text":"","title":"ROS Node"},{"location":"software/provider_can/#subscribed-topics","text":"None. provider_can only publish topics.","title":"Subscribed Topics"},{"location":"software/provider_can/#published-topics","text":"For each device initialized, there are 3 topics published: DEVICE_msgs, DEVICE_notices, DEVICE_properties, Where DEVICE is the name of the specific device (example: barometer_msgs) DEVICE_msgs Theses topics will contain all device\u2019s specific informations that are important during subarine\u2019s operation, such as speed for thrusters or pressure for barometer. DEVICE_notices These topics will contain ping responses and faults for each devices. DEVICE_properties These topics will contain devices properties. These properties will be published at provider_can startup for each discovered and known devices. Properties are: uint16 firmware_version : Signature of LPC chip uint32 uc_signature : may be RESET, SLEEP, WAKEUP or ISP uint8 capabilities : any data uint8 device_data : RTR send rate, in ms uint16 poll_rate In Winter 2016 version of provider_can, poll_rate properties means nothing. It is not actually implemented in ELE part. It will be later on.","title":"Published Topics"},{"location":"software/provider_can/#services","text":"provider_can offers 1 service, which is defined in SendCanMessage.srv in sonia_msgs file. The name of the service is send_can_message . The service is common to all devices. You may set thrusters speed, light intensity, diver_interface displayed text, etc. with this same service. See the parameters for more informations.","title":"Services"},{"location":"software/provider_can/#parameters","text":"This part is very important. It explains how to use the main service of the provider_can, which is send_can_message . /provider_can/can/send_can_message ( uint8 device_id , uint8 unique_id , uint8 method_number , float64 parameter_value , string string_param ) : returns uint8 As an example, if we want to send speed 50 to the port thruster, we would send this command in a command prompt: rosservice call /provider_can/send_can_message 2 1 0 50 \"\" param device_id = 2 // DEVICE_ID_actuators (constant defined in SendCanMessage.srv) param unique_id = 1 // UNIQUE_ID_ACT_port_motor (constant defined in SendCanMessage.srv) param method_number = 0 // METHOD_MOTOR_set_speed (constant defined in SendCanMessage.srv) param parameter_value = 50 // speed value param string_param = \u201c\u201d // unused See next sections for more explanations. Param device_id device_id represents the ID number of a specific class of devices, such as actuator or sensors. The IDs are all defined as constants in send_can_message service. Param unique_id : unique_id represents the ID number of a specific device in a device_id class. The IDs are all defined as constants in send_can_message service. Param method_number and parameter_value : method_number is the method you want to call from the specified device. Some methods are common to all devices. parameter_value is the only possible parameter of that method. Note: diver_interface has a string parameter. All methods numbers are defined as contants in the service .srv file. Param string_param This parameter is only used by diver interface. It is the parameter for the methods METHOD_DIVER_set_mission_string and METHOD_DIVER_set_state_string. It changes the strings displayed on the interface. return can_send_message always return 0 or 1, depending if the device specified is present or not on the can bus.","title":"Parameters"},{"location":"software/provider_dvl/","text":"Package: Provider DVL Global Architecture Configurations Topics ROS /provider_dvl/pd0_packet The `pd0_packet topics contains all the informations of the DVL. It is being sent from the DVL at every signals. The specifications of the PD0 packets can be found on the Teledyne Documentation (c.f. Github). It is composed of the other messages of the DVL and does not contain any raw data. The specifications for all the other messages can also be found on the documentation. # sonia_msgs/PD0Packet std_msgs/Header header uint32 seq time stamp string frame_id sonia_msgs/DeviceInfo device_info std_msgs/Header header uint32 seq time stamp string frame_id uint8 fw_version uint8 fw_revision uint64 cpu_board_serno uint16 system_configuration uint8 beam_count sonia_msgs/Sensors available_sensors std_msgs/Header header uint32 seq time stamp string frame_id bool calculates_speed_of_sound bool depth bool yaw bool pitch bool roll bool salinity bool temperature sonia_msgs/AcquisitionConfiguration acquisition_conf ... sonia_msgs/OutputConfiguration output_conf ... sonia_msgs/Status status ... sonia_msgs/CellReadings cell_readings ... sonia_msgs/BottomTrackingConfiguration bottom_tracking_conf ... sonia_msgs/BottomTracking bottom_tracking ... Note As the message AcquisitionConfigure to BottomTracking are also provided on other topics described below, you will be able to see the description for each one through their specific section. /provider_dvl/acquisition_conf ??? # sonia_msgs/AcquisitionConfiguration std_msgs/Header header uint32 seq time stamp string frame_id sonia_msgs/Sensors used_sensors std_msgs/Header header uint32 seq time stamp string frame_id bool calculates_speed_of_sound bool depth bool yaw bool pitch bool roll bool salinity bool temperature uint8 lag_duration uint8 cell_count uint8 profiling_mode uint8 low_correlation_threshold uint8 code_repetition_count uint16 pings_per_ensemble float32 cell_length float32 blank_after_transmit_distance float32 water_layer_min_ping_threshold float32 water_layer_velocity_threshold uint64 time_between_ping_groups float32 yaw_alignment float32 yaw_bias float32 first_cell_distance float32 transmit_pulse_length uint8 water_layer_start uint8 water_layer_end uint8 false_target_threshold bool low_latency_trigger float32 transmit_lag_distance bool narrow_bandwidth_mode uint8 base_frequency_index /provider_dvl/output_conf ??? # sonia_msgs/OutputConfiguration uint8 BEAM=0 uint8 INSTRUMENT=1 uint8 SHIP=2 uint8 EARTH=3 std_msgs/Header header uint32 seq time stamp string frame_id uint8 coordinate_system bool use_attitude bool use_3beam_solution bool use_bin_mapping /provider_dvl/status ??? # sonia_msgs/Status std_msgs/Header header uint32 seq time stamp string frame_id uint32 seq uint64 time geometry_msgs/Quaternion orientation float64 x float64 y float64 z float64 w geometry_msgs/Vector3 stddev_orientation float64 x float64 y float64 z float32 depth float32 speed_of_sound float32 salinity float32 temperature float32 pressure float32 pressure_variance uint8[8] adc_channels uint64 min_preping_wait uint16 self_test_result uint32 status_word /provider_dvl/cell_readings ??? # sonia_msgs/CellReadings std_msgs/Header header uint32 seq time stamp string frame_id uint64 time sonia_msgs/CellReading[] readings std_msgs/Header header uint32 seq time stamp string frame_id float32[4] velocity float32[4] correlation float32[4] intensity float32[4] quality /provider_dvl/bottom_tracking_conf ??? # sonia_msgs/BottomTrackingConfiguration std_msgs/Header header uint32 seq time stamp string frame_id uint16 ping_per_ensemble uint16 delay_before_reacquiring float32 correlation_threshold float32 evaluation_threshold float32 good_ping_threshold uint8 mode float32 max_velocity_error float32 max_tracking_depth uint8 gain /provider_dvl/bottom_tracking ??? # sonia_msgs/BottomTracking std_msgs/Header header uint32 seq time stamp string frame_id float64 time float64[4] range float64[4] velocity float64[4] correlation float64[4] evaluation float64[4] good_ping_ratio float64[4] rssi /provider_dvl/twist ??? # geometry_msgs/TwistWithCovarianceStamped std_msgs/Header header uint32 seq time stamp string frame_id geometry_msgs/TwistWithCovariance twist geometry_msgs/Twist twist geometry_msgs/Vector3 linear float64 x float64 y float64 z geometry_msgs/Vector3 angular float64 x float64 y float64 z float64[36] covariance","title":"Package: Provider DVL"},{"location":"software/provider_dvl/#package-provider-dvl","text":"","title":"Package: Provider DVL"},{"location":"software/provider_dvl/#global-architecture","text":"","title":"Global Architecture"},{"location":"software/provider_dvl/#configurations","text":"","title":"Configurations"},{"location":"software/provider_dvl/#topics-ros","text":"","title":"Topics ROS"},{"location":"software/provider_dvl/#provider_dvlpd0_packet","text":"The `pd0_packet topics contains all the informations of the DVL. It is being sent from the DVL at every signals. The specifications of the PD0 packets can be found on the Teledyne Documentation (c.f. Github). It is composed of the other messages of the DVL and does not contain any raw data. The specifications for all the other messages can also be found on the documentation. # sonia_msgs/PD0Packet std_msgs/Header header uint32 seq time stamp string frame_id sonia_msgs/DeviceInfo device_info std_msgs/Header header uint32 seq time stamp string frame_id uint8 fw_version uint8 fw_revision uint64 cpu_board_serno uint16 system_configuration uint8 beam_count sonia_msgs/Sensors available_sensors std_msgs/Header header uint32 seq time stamp string frame_id bool calculates_speed_of_sound bool depth bool yaw bool pitch bool roll bool salinity bool temperature sonia_msgs/AcquisitionConfiguration acquisition_conf ... sonia_msgs/OutputConfiguration output_conf ... sonia_msgs/Status status ... sonia_msgs/CellReadings cell_readings ... sonia_msgs/BottomTrackingConfiguration bottom_tracking_conf ... sonia_msgs/BottomTracking bottom_tracking ... Note As the message AcquisitionConfigure to BottomTracking are also provided on other topics described below, you will be able to see the description for each one through their specific section.","title":"/provider_dvl/pd0_packet"},{"location":"software/provider_dvl/#provider_dvlacquisition_conf","text":"??? # sonia_msgs/AcquisitionConfiguration std_msgs/Header header uint32 seq time stamp string frame_id sonia_msgs/Sensors used_sensors std_msgs/Header header uint32 seq time stamp string frame_id bool calculates_speed_of_sound bool depth bool yaw bool pitch bool roll bool salinity bool temperature uint8 lag_duration uint8 cell_count uint8 profiling_mode uint8 low_correlation_threshold uint8 code_repetition_count uint16 pings_per_ensemble float32 cell_length float32 blank_after_transmit_distance float32 water_layer_min_ping_threshold float32 water_layer_velocity_threshold uint64 time_between_ping_groups float32 yaw_alignment float32 yaw_bias float32 first_cell_distance float32 transmit_pulse_length uint8 water_layer_start uint8 water_layer_end uint8 false_target_threshold bool low_latency_trigger float32 transmit_lag_distance bool narrow_bandwidth_mode uint8 base_frequency_index","title":"/provider_dvl/acquisition_conf"},{"location":"software/provider_dvl/#provider_dvloutput_conf","text":"??? # sonia_msgs/OutputConfiguration uint8 BEAM=0 uint8 INSTRUMENT=1 uint8 SHIP=2 uint8 EARTH=3 std_msgs/Header header uint32 seq time stamp string frame_id uint8 coordinate_system bool use_attitude bool use_3beam_solution bool use_bin_mapping","title":"/provider_dvl/output_conf"},{"location":"software/provider_dvl/#provider_dvlstatus","text":"??? # sonia_msgs/Status std_msgs/Header header uint32 seq time stamp string frame_id uint32 seq uint64 time geometry_msgs/Quaternion orientation float64 x float64 y float64 z float64 w geometry_msgs/Vector3 stddev_orientation float64 x float64 y float64 z float32 depth float32 speed_of_sound float32 salinity float32 temperature float32 pressure float32 pressure_variance uint8[8] adc_channels uint64 min_preping_wait uint16 self_test_result uint32 status_word","title":"/provider_dvl/status"},{"location":"software/provider_dvl/#provider_dvlcell_readings","text":"??? # sonia_msgs/CellReadings std_msgs/Header header uint32 seq time stamp string frame_id uint64 time sonia_msgs/CellReading[] readings std_msgs/Header header uint32 seq time stamp string frame_id float32[4] velocity float32[4] correlation float32[4] intensity float32[4] quality","title":"/provider_dvl/cell_readings"},{"location":"software/provider_dvl/#provider_dvlbottom_tracking_conf","text":"??? # sonia_msgs/BottomTrackingConfiguration std_msgs/Header header uint32 seq time stamp string frame_id uint16 ping_per_ensemble uint16 delay_before_reacquiring float32 correlation_threshold float32 evaluation_threshold float32 good_ping_threshold uint8 mode float32 max_velocity_error float32 max_tracking_depth uint8 gain","title":"/provider_dvl/bottom_tracking_conf"},{"location":"software/provider_dvl/#provider_dvlbottom_tracking","text":"??? # sonia_msgs/BottomTracking std_msgs/Header header uint32 seq time stamp string frame_id float64 time float64[4] range float64[4] velocity float64[4] correlation float64[4] evaluation float64[4] good_ping_ratio float64[4] rssi","title":"/provider_dvl/bottom_tracking"},{"location":"software/provider_dvl/#provider_dvltwist","text":"??? # geometry_msgs/TwistWithCovarianceStamped std_msgs/Header header uint32 seq time stamp string frame_id geometry_msgs/TwistWithCovariance twist geometry_msgs/Twist twist geometry_msgs/Vector3 linear float64 x float64 y float64 z geometry_msgs/Vector3 angular float64 x float64 y float64 z float64[36] covariance","title":"/provider_dvl/twist"},{"location":"software/provider_media/","text":"","title":"Provider media"},{"location":"software/provider_sonar/","text":"provider_sonar The provider_sonar package is the module handling the Tritech DST Micron sonar. The sonar works with a proprietary SeaNet RS-232 Protocol. Overview Usage Example A launch file exists for launching the provider_sonar package. One you have compiled and sourced the devel/setup.bash file, you can simply execute: roslaunch provider_sonar provider_sonar.launch This will start the sonar and open all the published topics. Global Architecture Class Diagrams INS Flowcharts","title":"provider_sonar"},{"location":"software/provider_sonar/#provider_sonar","text":"The provider_sonar package is the module handling the Tritech DST Micron sonar. The sonar works with a proprietary SeaNet RS-232 Protocol.","title":"provider_sonar"},{"location":"software/provider_sonar/#overview","text":"","title":"Overview"},{"location":"software/provider_sonar/#usage-example","text":"A launch file exists for launching the provider_sonar package. One you have compiled and sourced the devel/setup.bash file, you can simply execute: roslaunch provider_sonar provider_sonar.launch This will start the sonar and open all the published topics.","title":"Usage Example"},{"location":"software/provider_sonar/#global-architecture","text":"","title":"Global Architecture"},{"location":"software/provider_sonar/#class-diagrams","text":"","title":"Class Diagrams"},{"location":"software/provider_sonar/#ins-flowcharts","text":"","title":"INS Flowcharts"},{"location":"software/vision/","text":"Vision This file describe how the vision is working and software is interfacing with ROS. You may find here every information you need about the services and messages. Collecting and processing data We have two cameras in the bot one is forward facing and uses Go Pro 11 and other one is downward facing and uses a logitech Camera. Data gathering The vision of the bot is available on topics /front_camera/raw_image and /bottom_camera/raw_image . The topics name and pattern is same as in UUV_Simulator. Since we are building our software taking that as a reference. You can view the live image output on rqt-image-view. Data processing The data processing will be done on jetson. We are planning to first use some filteration algorithms or image processing and then use Yolo on top of that to detect various underwater objects for the tasks. Currently since we are testing we are utilising Yolo V3 on our custom datasets from the pool. Global Architecture","title":"Vision"},{"location":"software/vision/#vision","text":"This file describe how the vision is working and software is interfacing with ROS. You may find here every information you need about the services and messages.","title":"Vision"},{"location":"software/vision/#collecting-and-processing-data","text":"We have two cameras in the bot one is forward facing and uses Go Pro 11 and other one is downward facing and uses a logitech Camera.","title":"Collecting and processing data"},{"location":"software/vision/#data-gathering","text":"The vision of the bot is available on topics /front_camera/raw_image and /bottom_camera/raw_image . The topics name and pattern is same as in UUV_Simulator. Since we are building our software taking that as a reference. You can view the live image output on rqt-image-view.","title":"Data gathering"},{"location":"software/vision/#data-processing","text":"The data processing will be done on jetson. We are planning to first use some filteration algorithms or image processing and then use Yolo on top of that to detect various underwater objects for the tasks. Currently since we are testing we are utilising Yolo V3 on our custom datasets from the pool.","title":"Data processing"},{"location":"software/vision/#global-architecture","text":"","title":"Global Architecture"},{"location":"user/c%2B%2B_style_guide/","text":"C++ Style Guide File and Directory Architecture Naming of Packages ??? Structure of a Project ??? Naming of files ??? Project Documentation ??? Naming Conventions Classes ??? Functions ??? Member Variables ??? Constants ??? Best Practices Usage of type deduction ??? Declare your constructors explicit ??? Inline your method more often ??? Use the keywork override ??? Use the keywork nullptr ??? Don\u2019t use raw pointers, smart pointers are great ! ??? Avoid C-style casting ??? Respect the declaration order of member variables ??? Declare your destructor virtual for polymorphic class ??? Declare your method constants whenever it is possible ??? Use bool instead of int for conditions ??? Declare a public \u2018Ptr\u2019 typedef in your classes ??? Recommended Tools clang-format cpplint cppcheck valgrind Recommended References Introductory A Tour of C++ (Bjarne Stroustrup) Programmez avec le langage C++ (Open Classrooms) Intermediate Effective C++ (Scott Meyers) Effective Modern C++ (Scott Meyers) More Effective C++ (Scott Meyers) Design Patterns: Elements of Reusable Object-Oriented Software (GoF) C++ Core Guidelines Advanced Modern C++ Design (Andrei Alexandrescu) Advanced C++ Metaprogramming (Davide Di Gennaro) C++ Concurrency in Action (Anthony Williams)","title":"<a name=\"title\"></a> C++ Style Guide"},{"location":"user/c%2B%2B_style_guide/#c-style-guide","text":"","title":" C++ Style Guide"},{"location":"user/c%2B%2B_style_guide/#file-and-directory-architecture","text":"","title":"File and Directory Architecture"},{"location":"user/c%2B%2B_style_guide/#naming-of-packages","text":"???","title":" Naming of Packages"},{"location":"user/c%2B%2B_style_guide/#structure-of-a-project","text":"???","title":" Structure of a Project"},{"location":"user/c%2B%2B_style_guide/#naming-of-files","text":"???","title":" Naming of files"},{"location":"user/c%2B%2B_style_guide/#project-documentation","text":"???","title":" Project Documentation"},{"location":"user/c%2B%2B_style_guide/#naming-conventions","text":"","title":"Naming Conventions"},{"location":"user/c%2B%2B_style_guide/#classes","text":"???","title":" Classes"},{"location":"user/c%2B%2B_style_guide/#functions","text":"???","title":" Functions"},{"location":"user/c%2B%2B_style_guide/#member-variables","text":"???","title":" Member Variables"},{"location":"user/c%2B%2B_style_guide/#constants","text":"???","title":" Constants"},{"location":"user/c%2B%2B_style_guide/#best-practices","text":"","title":"Best Practices"},{"location":"user/c%2B%2B_style_guide/#usage-of-type-deduction","text":"???","title":" Usage of type deduction"},{"location":"user/c%2B%2B_style_guide/#declare-your-constructors-explicit","text":"???","title":" Declare your constructors explicit"},{"location":"user/c%2B%2B_style_guide/#inline-your-method-more-often","text":"???","title":" Inline your method more often"},{"location":"user/c%2B%2B_style_guide/#use-the-keywork-override","text":"???","title":" Use the keywork override"},{"location":"user/c%2B%2B_style_guide/#use-the-keywork-nullptr","text":"???","title":" Use the keywork nullptr"},{"location":"user/c%2B%2B_style_guide/#dont-use-raw-pointers-smart-pointers-are-great","text":"???","title":" Don\u2019t use raw pointers, smart pointers are great !"},{"location":"user/c%2B%2B_style_guide/#avoid-c-style-casting","text":"???","title":" Avoid C-style casting"},{"location":"user/c%2B%2B_style_guide/#respect-the-declaration-order-of-member-variables","text":"???","title":" Respect the declaration order of member variables"},{"location":"user/c%2B%2B_style_guide/#declare-your-destructor-virtual-for-polymorphic-class","text":"???","title":" Declare your destructor virtual for polymorphic class"},{"location":"user/c%2B%2B_style_guide/#declare-your-method-constants-whenever-it-is-possible","text":"???","title":" Declare your method constants whenever it is possible"},{"location":"user/c%2B%2B_style_guide/#use-bool-instead-of-int-for-conditions","text":"???","title":" Use bool instead of int for conditions"},{"location":"user/c%2B%2B_style_guide/#declare-a-public-ptr-typedef-in-your-classes","text":"???","title":" Declare a public 'Ptr' typedef in your classes"},{"location":"user/c%2B%2B_style_guide/#recommended-tools","text":"","title":"Recommended Tools"},{"location":"user/c%2B%2B_style_guide/#clang-format","text":"","title":" clang-format"},{"location":"user/c%2B%2B_style_guide/#cpplint","text":"","title":" cpplint"},{"location":"user/c%2B%2B_style_guide/#cppcheck","text":"","title":" cppcheck"},{"location":"user/c%2B%2B_style_guide/#valgrind","text":"","title":" valgrind"},{"location":"user/c%2B%2B_style_guide/#recommended-references","text":"","title":"Recommended References"},{"location":"user/c%2B%2B_style_guide/#introductory","text":"A Tour of C++ (Bjarne Stroustrup) Programmez avec le langage C++ (Open Classrooms)","title":" Introductory"},{"location":"user/c%2B%2B_style_guide/#intermediate","text":"Effective C++ (Scott Meyers) Effective Modern C++ (Scott Meyers) More Effective C++ (Scott Meyers) Design Patterns: Elements of Reusable Object-Oriented Software (GoF) C++ Core Guidelines","title":" Intermediate"},{"location":"user/c%2B%2B_style_guide/#advanced","text":"Modern C++ Design (Andrei Alexandrescu) Advanced C++ Metaprogramming (Davide Di Gennaro) C++ Concurrency in Action (Anthony Williams)","title":" Advanced"},{"location":"user/deprecated_auv6/","text":"Working with Eclipse We use Eclipse for our Java development and we also need the C++ plugin that allows us to run and debug C++ code. First, you need to download the last version on eclipse website : cd wget http://eclipse.mirror.rafal.ca/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-linux-gtk-x86_64.tar.gz tar zxvf eclipse-java-mars-1-linux-gtk-x86_64.tar.gz sudo mv eclipse /opt/eclipse Note You will need these plugin to work with our AUV6/AUV7 software: maven - http://download.eclipse.org/technology/m2e/releases m2e - Maven Integration for Eclipse m2e connector for xmlbeans pydev - http://pydev.org/updates pydev for eclipse egit - http://download.eclipse.org/egit/updates Eclipse Git Team provider cdt - http://download.eclipse.org/tools/cdt/releases/8.5 C/C++ development tools windows build - outil pour interface swing - http://dl.google.com/eclipse/inst/d2wbpro/latest/3.7 Swing Designer WindowsBuild Engine (Required) You can also configure Eclipse to use our formatting file. You can find it here: wget http://sonia-auv.readthedocs.org/assets/files/sonia-formatter.epf ### Installing AUV6 First of all, install all AUV6 dependencies: aptitude install -y openjdk-7-jdk scons build-essential maven2 You can now clone the AUV6 script repository and launch the install script: mkdir -p $SONIA_WORKSPACE_ROOT cd $SONIA_WORKSPACE_ROOT git@bitbucket.org:sonia-auv/sonia-scripts.git sh sonia-scripts/git_update_repo.sh You must change your maven settings.xml file for adding our repo/mirrors: mkdir -p ~/.m2 wget http://sonia-auv.readthedocs.org/assets/files/settings.xml -O ~/.m2/settings.xml You can now build the CAN server: cd $SONIA_WORKSPACE_ROOT/can-server scons And now build the whole AUV6 system: cd $SONIA_WORKSPACE_ROOT/sonia-jaus-library mvn clean install cd $SONIA_WORKSPACE_ROOT/octets-common mvn clean install cd $SONIA_WORKSPACE_ROOT/auv-mission-library mvn clean install cd $SONIA_WORKSPACE_ROOT/auv6 mvn clean install That\u2019s it ! You can now work with AUV6","title":"Deprecated auv6"},{"location":"user/deprecated_auv6/#working-with-eclipse","text":"We use Eclipse for our Java development and we also need the C++ plugin that allows us to run and debug C++ code. First, you need to download the last version on eclipse website : cd wget http://eclipse.mirror.rafal.ca/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-linux-gtk-x86_64.tar.gz tar zxvf eclipse-java-mars-1-linux-gtk-x86_64.tar.gz sudo mv eclipse /opt/eclipse Note You will need these plugin to work with our AUV6/AUV7 software: maven - http://download.eclipse.org/technology/m2e/releases m2e - Maven Integration for Eclipse m2e connector for xmlbeans pydev - http://pydev.org/updates pydev for eclipse egit - http://download.eclipse.org/egit/updates Eclipse Git Team provider cdt - http://download.eclipse.org/tools/cdt/releases/8.5 C/C++ development tools windows build - outil pour interface swing - http://dl.google.com/eclipse/inst/d2wbpro/latest/3.7 Swing Designer WindowsBuild Engine (Required) You can also configure Eclipse to use our formatting file. You can find it here: wget http://sonia-auv.readthedocs.org/assets/files/sonia-formatter.epf ### Installing AUV6 First of all, install all AUV6 dependencies: aptitude install -y openjdk-7-jdk scons build-essential maven2 You can now clone the AUV6 script repository and launch the install script: mkdir -p $SONIA_WORKSPACE_ROOT cd $SONIA_WORKSPACE_ROOT git@bitbucket.org:sonia-auv/sonia-scripts.git sh sonia-scripts/git_update_repo.sh You must change your maven settings.xml file for adding our repo/mirrors: mkdir -p ~/.m2 wget http://sonia-auv.readthedocs.org/assets/files/settings.xml -O ~/.m2/settings.xml You can now build the CAN server: cd $SONIA_WORKSPACE_ROOT/can-server scons And now build the whole AUV6 system: cd $SONIA_WORKSPACE_ROOT/sonia-jaus-library mvn clean install cd $SONIA_WORKSPACE_ROOT/octets-common mvn clean install cd $SONIA_WORKSPACE_ROOT/auv-mission-library mvn clean install cd $SONIA_WORKSPACE_ROOT/auv6 mvn clean install That\u2019s it ! You can now work with AUV6","title":" Working with Eclipse"},{"location":"user/developers_guide/","text":"Developers Guide Code style Cpp : Follow the ROS Cpp Style Guide rigorously. CMake : Follow Caktin CMake Style Guide . Python : Code should follow PEP8. Please see ROS PyStyleGuide for details. Use Anaconda plugin for Sublime Text editor for style check. Bash : Use the provided python script. Roslint : All packages (except commons packages which don\u2019t have C++ or Python code) depend on roslint for static code analysis. Note: Utils contains scripts for formatting C++, Python, XML, CMakeLists files. Since these are bash scripts, there is a formatting script for Bash. Documentation We maintain several forms of online documentation for ROS packages: MKD DOCS : This is the DOCUMENTATION repo. Home for tutorials, design documents, technical details, research and other sorts of information. This is mainly for people running our code. In general, anything that people need to know outside source, to run the AUV software/ hardware successfully. Auto-generated code documentation Internal docs : This is mainly for people integrating with or editing your code. These are auto-generated from source code comments using Doxygen. Travis CI generated and auto-deploys to the gh-pages branch. Located at AUV documentation . Look at sample commit to see how to add documentation. Also, the Doxygen manual is good for a quick start. Source control We use Git. Read the wiki page on git. Bug tracking We use GitHub issues on AUV repo for tracking bugs. Testing We use two levels of testing: Library : At the library level, we use standard unit-test frameworks. In C++, we use gtest. In Python, we use unittest. Message : At the message level, we use rostest to set up a system of ROS nodes, run a test node, then tear down the system. ROS has established best practices and policies for writing and running tests. AUV code is structured in layers, with each layer interacting with the other using actionlib. For testing each layer separately, we use unit tests nodes which are part of the concerning layer itself. Standardization Code should use ROS services, follow guidelines for their use: Use rosout for printing messages. Use the ROS Clock for time-based routines. Large data files Large files (anything over 1MB, really) often don\u2019t belong in the AUV repositories, especially if they are just used for tests. These large files affect the time that it takes to checkout the repository. Naming Convention Please refer to ROS CppStyleGuide and ROS Conventions. Avoid using any sort of Hungarian notation on names and \u201c_ptr\u201d on pointers. Code Element Style Comment Namespace under_scored Differentiate from class names Class name CamelCase To differentiate from STL types which ISO recommends Function name camelCase Lower case start is almost universal Parameters/Locals under_scored Vast majority of standards recommends this Member variables under_scored_with_ The prefix _ is heavily discouraged Enums and members CamelCase Most except very old standards agree Globals g_under_scored You shouldn\u2019t have these in first place! Constants UPPER_CASE Very contentious and we just have to pick one here File names Match case of class name in file This removes inconsistency in auto-generated code Header Files Use a namespace qualified #ifdef to protect against multiple inclusion: ```cpp // ifndef msr_airsim_MyHeader_hpp // #define msr_airsim_MyHeader_hpp // #endif","title":"Developers Guide"},{"location":"user/developers_guide/#developers-guide","text":"","title":" Developers Guide"},{"location":"user/developers_guide/#code-style","text":"Cpp : Follow the ROS Cpp Style Guide rigorously. CMake : Follow Caktin CMake Style Guide . Python : Code should follow PEP8. Please see ROS PyStyleGuide for details. Use Anaconda plugin for Sublime Text editor for style check. Bash : Use the provided python script. Roslint : All packages (except commons packages which don\u2019t have C++ or Python code) depend on roslint for static code analysis. Note: Utils contains scripts for formatting C++, Python, XML, CMakeLists files. Since these are bash scripts, there is a formatting script for Bash.","title":"Code style"},{"location":"user/developers_guide/#documentation","text":"We maintain several forms of online documentation for ROS packages: MKD DOCS : This is the DOCUMENTATION repo. Home for tutorials, design documents, technical details, research and other sorts of information. This is mainly for people running our code. In general, anything that people need to know outside source, to run the AUV software/ hardware successfully. Auto-generated code documentation Internal docs : This is mainly for people integrating with or editing your code. These are auto-generated from source code comments using Doxygen. Travis CI generated and auto-deploys to the gh-pages branch. Located at AUV documentation . Look at sample commit to see how to add documentation. Also, the Doxygen manual is good for a quick start.","title":"Documentation"},{"location":"user/developers_guide/#source-control","text":"We use Git. Read the wiki page on git.","title":"Source control"},{"location":"user/developers_guide/#bug-tracking","text":"We use GitHub issues on AUV repo for tracking bugs.","title":"Bug tracking"},{"location":"user/developers_guide/#testing","text":"We use two levels of testing: Library : At the library level, we use standard unit-test frameworks. In C++, we use gtest. In Python, we use unittest. Message : At the message level, we use rostest to set up a system of ROS nodes, run a test node, then tear down the system. ROS has established best practices and policies for writing and running tests. AUV code is structured in layers, with each layer interacting with the other using actionlib. For testing each layer separately, we use unit tests nodes which are part of the concerning layer itself.","title":"Testing"},{"location":"user/developers_guide/#standardization","text":"Code should use ROS services, follow guidelines for their use: Use rosout for printing messages. Use the ROS Clock for time-based routines.","title":"Standardization"},{"location":"user/developers_guide/#large-data-files","text":"Large files (anything over 1MB, really) often don\u2019t belong in the AUV repositories, especially if they are just used for tests. These large files affect the time that it takes to checkout the repository.","title":"Large data files"},{"location":"user/developers_guide/#naming-convention","text":"Please refer to ROS CppStyleGuide and ROS Conventions. Avoid using any sort of Hungarian notation on names and \u201c_ptr\u201d on pointers. Code Element Style Comment Namespace under_scored Differentiate from class names Class name CamelCase To differentiate from STL types which ISO recommends Function name camelCase Lower case start is almost universal Parameters/Locals under_scored Vast majority of standards recommends this Member variables under_scored_with_ The prefix _ is heavily discouraged Enums and members CamelCase Most except very old standards agree Globals g_under_scored You shouldn\u2019t have these in first place! Constants UPPER_CASE Very contentious and we just have to pick one here File names Match case of class name in file This removes inconsistency in auto-generated code","title":"Naming Convention"},{"location":"user/developers_guide/#header-files","text":"Use a namespace qualified #ifdef to protect against multiple inclusion: ```cpp // ifndef msr_airsim_MyHeader_hpp // #define msr_airsim_MyHeader_hpp // #endif","title":"Header Files"},{"location":"user/environment/","text":"Environment Command list sa - start all the ros service on the auv(only on the babe). sv - start the vision system (only on the babe). sas - start all the proc, but the providers are simulated. sj - start the system on the jetson(only on the jetson). babe - remote connect to the auv. jetson - remote connect to the jetson. babe? - ping the babe. switch? - ping the switch. jetson? - ping the jetson. sonia-source - source the bash generated by catkin sonia-cd - put the current directory for the user at the sonia workspace. telemetry - open the general telemetry. controlSub - open the control telemety. dry_test - open the telemetry for a dry_test. pool - open the telemetry for pool test. comp - compile the project wherever you are, usage recommended instead of catkin_make. comp_reset - erase the compilation cache file before calling comp. swap_babe - swap the current target (local -> babe OR babe\u2013>local). update-sonia-script - update the current .bash_sonia file. full_poof - shutdown the babe and the jetson. Dry_test connect to the babe with the babe command. start the auv system with the sa command. open a new terminal and connect to the babe. start the vision with the sv command. open a new terminal and change the current target with swap_babe command. start the telemetry for a dry_test with the dry_test command. execute the dry_test. Your browser does not support the video tag. Test on the jetson connect to the babe with the babe command. start the auv system with the sa command. open a new terminal and connect to the babe. start the vision with the sv command. open a new terminal and connect to the jetson with the jetson command. start the system on the jetson with the sj command. open a new terminal and change the current target with swap_babe command. start the telemetry for the test with the pool command. execute the test. Pool test environment connect to the babe with the babe command. start the auv system with the sa command. open a new terminal and connect to the babe. start the vision with the sv command. open a new terminal and change the current target with swap_babe command. start the telemetry for the test with the pool command. execute the test. Mission planing interface Your browser does not support the video tag. Test while simulating the environment start the simulated auv system with sas open a new terminal start the telemetry for the test with the pool command. execute the test. Git tutorial the team use git to work with github: A good git tutorial can be found on this site , it\u2019s free but you need an account. A list of all the command can also be found on the official reference manual . Linux tutorial the team use linux for their developpement environment. A good knowledge of linux is necessary: A good tutorial about the command line can be found on this site , it\u2019s free but you need an account. C++ tutorial the team use C++ for all their low level development: A good tutorial about C++ can be found here , only part 1 and 2 is necessary. Python2 tutorial the team use python2 for all their high level development: A good python tutorial can be found on the official site . ROS tutorial the team use ROS inside the sub to allow process to communicate between them: A good tutorial for the robot operating system can be found here IDE the S.O.N.I.A officially support jetbrains product, you can get them for free if you register with your \u00c9TS email at this site the team use clion for c++: the team use pycharm for python2:","title":"Environment"},{"location":"user/environment/#environment","text":"","title":"Environment"},{"location":"user/environment/#command-list","text":"sa - start all the ros service on the auv(only on the babe). sv - start the vision system (only on the babe). sas - start all the proc, but the providers are simulated. sj - start the system on the jetson(only on the jetson). babe - remote connect to the auv. jetson - remote connect to the jetson. babe? - ping the babe. switch? - ping the switch. jetson? - ping the jetson. sonia-source - source the bash generated by catkin sonia-cd - put the current directory for the user at the sonia workspace. telemetry - open the general telemetry. controlSub - open the control telemety. dry_test - open the telemetry for a dry_test. pool - open the telemetry for pool test. comp - compile the project wherever you are, usage recommended instead of catkin_make. comp_reset - erase the compilation cache file before calling comp. swap_babe - swap the current target (local -> babe OR babe\u2013>local). update-sonia-script - update the current .bash_sonia file. full_poof - shutdown the babe and the jetson.","title":"Command list"},{"location":"user/environment/#dry_test","text":"connect to the babe with the babe command. start the auv system with the sa command. open a new terminal and connect to the babe. start the vision with the sv command. open a new terminal and change the current target with swap_babe command. start the telemetry for a dry_test with the dry_test command. execute the dry_test. Your browser does not support the video tag.","title":"Dry_test"},{"location":"user/environment/#test-on-the-jetson","text":"connect to the babe with the babe command. start the auv system with the sa command. open a new terminal and connect to the babe. start the vision with the sv command. open a new terminal and connect to the jetson with the jetson command. start the system on the jetson with the sj command. open a new terminal and change the current target with swap_babe command. start the telemetry for the test with the pool command. execute the test.","title":"Test on the jetson"},{"location":"user/environment/#pool-test-environment","text":"connect to the babe with the babe command. start the auv system with the sa command. open a new terminal and connect to the babe. start the vision with the sv command. open a new terminal and change the current target with swap_babe command. start the telemetry for the test with the pool command. execute the test.","title":"Pool test environment"},{"location":"user/environment/#mission-planing-interface","text":"Your browser does not support the video tag.","title":"Mission planing interface"},{"location":"user/environment/#test-while-simulating-the-environment","text":"start the simulated auv system with sas open a new terminal start the telemetry for the test with the pool command. execute the test.","title":"Test while simulating the environment"},{"location":"user/environment/#git-tutorial","text":"the team use git to work with github: A good git tutorial can be found on this site , it\u2019s free but you need an account. A list of all the command can also be found on the official reference manual .","title":"Git tutorial"},{"location":"user/environment/#linux-tutorial","text":"the team use linux for their developpement environment. A good knowledge of linux is necessary: A good tutorial about the command line can be found on this site , it\u2019s free but you need an account.","title":"Linux tutorial"},{"location":"user/environment/#c-tutorial","text":"the team use C++ for all their low level development: A good tutorial about C++ can be found here , only part 1 and 2 is necessary.","title":"C++ tutorial"},{"location":"user/environment/#python2-tutorial","text":"the team use python2 for all their high level development: A good python tutorial can be found on the official site .","title":"Python2 tutorial"},{"location":"user/environment/#ros-tutorial","text":"the team use ROS inside the sub to allow process to communicate between them: A good tutorial for the robot operating system can be found here","title":"ROS tutorial"},{"location":"user/environment/#ide","text":"the S.O.N.I.A officially support jetbrains product, you can get them for free if you register with your \u00c9TS email at this site the team use clion for c++: the team use pycharm for python2:","title":"IDE"},{"location":"user/getting_started/","text":"","title":"Getting Started"},{"location":"user/installation/","text":"Installation This document provides all the steps for configuring your environment. Currently, our whole environment is set up on Ubuntu 18.04 and ROS Melodic. We are yet to commit the completely working AUV repository on our github but nevertheless installation procedure will remain the same! This repository is located at ----- and you will have to be part of the AUV IITK organisation to access it. If it is not the case yet, please ask an administrator to add you. You will find the details on how to install and configure you environment on all the specific sections (we are assuming you have full ros-melodic-desktop already set up): Installing Packages Installing UUV_Simulator Install packages Clone the repository in the src folder of your catkin workspace. The repository requires the following ROS packages to run: usb_cam, geographic_msgs, rosserial_arduino, underwater_sensor_msgs, ros-melodic-grid-map, ros-melodic-image-geometry, ros-melodic-tf. To use some interpolation functions, you\u2019ll need to install scipy. You can build and install those packages from their respective sources or you can use the following command in Ubuntu 18.04 to install them. If you are building from source or using a different package manager, make sure you are building the melodic version of these packages to ensure maximum compatibility. sudo apt-get install ros-melodic-usb-cam \\ ros-melodic-geographic-msgs \\ ros-melodic-rosserial-arduino \\ ros-melodic-underwater-sensor-msgs \\ ros-melodic-grid-map \\ ros-melodic-image-geometry \\ ros-melodic-tf pip install scipy Now Build the whole repo package by running catkin_make Install AUV_IITK Software Installing Anahita","title":"Installation"},{"location":"user/installation/#installation","text":"This document provides all the steps for configuring your environment. Currently, our whole environment is set up on Ubuntu 18.04 and ROS Melodic. We are yet to commit the completely working AUV repository on our github but nevertheless installation procedure will remain the same! This repository is located at ----- and you will have to be part of the AUV IITK organisation to access it. If it is not the case yet, please ask an administrator to add you. You will find the details on how to install and configure you environment on all the specific sections (we are assuming you have full ros-melodic-desktop already set up): Installing Packages Installing UUV_Simulator","title":" Installation"},{"location":"user/installation/#install-packages","text":"Clone the repository in the src folder of your catkin workspace. The repository requires the following ROS packages to run: usb_cam, geographic_msgs, rosserial_arduino, underwater_sensor_msgs, ros-melodic-grid-map, ros-melodic-image-geometry, ros-melodic-tf. To use some interpolation functions, you\u2019ll need to install scipy. You can build and install those packages from their respective sources or you can use the following command in Ubuntu 18.04 to install them. If you are building from source or using a different package manager, make sure you are building the melodic version of these packages to ensure maximum compatibility. sudo apt-get install ros-melodic-usb-cam \\ ros-melodic-geographic-msgs \\ ros-melodic-rosserial-arduino \\ ros-melodic-underwater-sensor-msgs \\ ros-melodic-grid-map \\ ros-melodic-image-geometry \\ ros-melodic-tf pip install scipy Now Build the whole repo package by running catkin_make","title":" Install packages"},{"location":"user/installation/#install-auv_iitk-software","text":"","title":"Install AUV_IITK Software "},{"location":"user/installation/#installing-anahita","text":"","title":" Installing Anahita"}]}